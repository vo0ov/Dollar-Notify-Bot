import asyncio
import logging
import time

from aiogram import Bot

from api import get_usd_rate
from config import settings

logger = logging.getLogger(__name__)


async def send_start_rate_notify(bot: Bot, rate: float):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –∫—É—Ä—Å–æ–º USD.
    """

    msg = f'üíµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USD: <code><b>{rate:.2f}‚ÇΩ</b></code>'
    await bot.send_message(settings.owner_id, msg)
    logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {rate:.2f}‚ÇΩ')
    return rate


async def send_rate_notify(bot: Bot, old_rate: float, new_rate: float):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ —Å–º–µ–Ω–µ –∫—É—Ä—Å–∞ USD.
    """

    msg = f'üíµ –ö—É—Ä—Å USD –∏–∑–º–µ–Ω–∏–ª—Å—è: <code><b>{old_rate:.2f}‚ÇΩ</b></code> ‚Üí <code><b>{new_rate:.2f}‚ÇΩ</b></code>'
    await bot.send_message(settings.owner_id, msg)
    logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {old_rate:.2f} -> {new_rate:.2f}')


async def run_notify_loop(bot: Bot):
    """
    –¶–∏–∫–ª: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
    –ï—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç send_rate_notify().
    –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç send_start_rate_notify().
    """

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    logger.info('–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ USD...')
    interval = settings.check_interval
    next_run = time.monotonic()
    last_rate = None

    while True:
        next_run += interval

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USD
            rate = await get_usd_rate()

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫—É—Ä—Å –∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if last_rate is not None and rate != last_rate:
                await send_rate_notify(bot, last_rate, rate)

            elif last_rate is None:
                logger.info(f'–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫—É—Ä—Å USD: {rate:.2f}‚ÇΩ')
                await send_start_rate_notify(bot, rate)

            else:
                logger.info(f'–ö—É—Ä—Å USD –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {rate:.2f}‚ÇΩ')

            last_rate = rate

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞: {e}')

        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(max(0, next_run - time.monotonic()))
